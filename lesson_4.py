from sys import argv
from functools import reduce

script_name, hours, salary_per_hour, bonus = argv

# 1.
"""
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""
print("*" * 50 + " 1 " + "*" * 50)

try:
    hours = int(hours)
    salary_per_hour = int(salary_per_hour)
    bonus = int(bonus)
    print(f"Расчет заработной платы: {hours * salary_per_hour + bonus}")
except ValueError:
    print("Введите корректные данные для вычислений.")


# 2.
"""
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""
print("*" * 50 + " 2 " + "*" * 50)

first_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [el for i, el in enumerate(first_list) if el > first_list[i - 1] and i != 0]
print(new_list)

# 3.
"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""
print("*" * 50 + " 3 " + "*" * 50)

super_list = [num for num in range(20, 241) if num % 20 == 0 or num % 21 == 0]

# 4.
"""
Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
"""
print("*" * 50 + " 4 " + "*" * 50)

list_num = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list_new = print([num for num in list_num if list_num.count(num) == 1])


# 5.
"""
Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""
print("*" * 50 + " 5 " + "*" * 50)

list_new = [num for num in range(100, 1001) if num % 2 == 0]
print(reduce(lambda a, b: a * b, list_new))

# 6.
"""
Реализовать два небольших скрипта: 
а) итератор, генерирующий целые числа, начиная с указанного, 
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения. 
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""
print("*" * 50 + " 6 " + "*" * 50)


def generate_nums_from(num_from):
    if num_from > 10:
        return False
    else:
        return [num for num in range(num_from, 11)]


print(generate_nums_from(3))

# б) итератор, повторяющий элементы некоторого списка, определенного заранее. - не понятное условие, привидите пример
# в условии пожалуйста

# 7.
"""
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, 
а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""
print("*" * 50 + " 7 " + "*" * 50)


def generator(n):
    for el in range(1, n + 1):
        yield el


g = generator(4)
print(g)


for el in g:
    print(el)
